// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Warehouse.Persistence.PostgreSQL.Persistence.Contexts;

#nullable disable

namespace Warehouse.Persistence.Postgre.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    partial class WarehouseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Warehouse.Domain.Entities.Baskets.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Baskets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-2222-2321-2321-111111111429"),
                            UserId = new Guid("11111111-2222-2321-2321-111111111456")
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Baskets.BasketLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("BasketLines");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Orders.OrderLine", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Orders.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-2222-2321-2321-111111111111"),
                            Name = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-1111-1234-4321-222222222222"),
                            Name = 2
                        },
                        new
                        {
                            Id = new Guid("33333333-3322-1122-4444-333333333333"),
                            Name = 3
                        },
                        new
                        {
                            Id = new Guid("44444444-5555-5555-6666-666666666666"),
                            Name = 4
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-8888-888888888888"),
                            Name = 5
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Orders.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Nike"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            BrandId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "Description for Product 3",
                            IsDeleted = false,
                            Price = 19.99m,
                            Title = "Product 3"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            BrandId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Description for Product 4",
                            IsDeleted = false,
                            Price = 49.99m,
                            Title = "Product 4"
                        },
                        new
                        {
                            Id = new Guid("12345678-1234-5678-9012-345678901234"),
                            BrandId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "Description for Product 5",
                            IsDeleted = false,
                            Price = 59.99m,
                            Title = "Product 5"
                        },
                        new
                        {
                            Id = new Guid("23456789-2345-6789-0123-456789012345"),
                            BrandId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Timeless classic jeans in blue for a casual and versatile look.",
                            IsDeleted = false,
                            Price = 34.99m,
                            Title = "Classic Jeans"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.ProductGroup", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ProductGroups");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("88888888-8888-8888-8888-888888888888"),
                            GroupId = new Guid("99999999-9999-9999-9999-999999999999")
                        },
                        new
                        {
                            ProductId = new Guid("99999999-9999-9999-9999-999999999999"),
                            GroupId = new Guid("88888888-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            ProductId = new Guid("12345678-1234-5678-9012-345678901234"),
                            GroupId = new Guid("88888888-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            ProductId = new Guid("23456789-2345-6789-0123-456789012345"),
                            GroupId = new Guid("99999999-9999-9999-9999-999999999999")
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.ProductSize", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "SizeId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductSizes");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("88888888-8888-8888-8888-888888888888"),
                            SizeId = new Guid("55555555-5555-5555-5555-555555555555"),
                            QuantityInStock = 30
                        },
                        new
                        {
                            ProductId = new Guid("88888888-8888-8888-8888-888888888888"),
                            SizeId = new Guid("44444444-4444-4444-4444-444444444444"),
                            QuantityInStock = 20
                        },
                        new
                        {
                            ProductId = new Guid("99999999-9999-9999-9999-999999999999"),
                            SizeId = new Guid("55555555-5555-5555-5555-555555555555"),
                            QuantityInStock = 30
                        },
                        new
                        {
                            ProductId = new Guid("12345678-1234-5678-9012-345678901234"),
                            SizeId = new Guid("55555555-5555-5555-5555-555555555555"),
                            QuantityInStock = 30
                        },
                        new
                        {
                            ProductId = new Guid("12345678-1234-5678-9012-345678901234"),
                            SizeId = new Guid("44444444-4444-4444-4444-444444444444"),
                            QuantityInStock = 20
                        },
                        new
                        {
                            ProductId = new Guid("23456789-2345-6789-0123-456789012345"),
                            SizeId = new Guid("55555555-5555-5555-5555-555555555555"),
                            QuantityInStock = 30
                        },
                        new
                        {
                            ProductId = new Guid("23456789-2345-6789-0123-456789012345"),
                            SizeId = new Guid("44444444-4444-4444-4444-444444444444"),
                            QuantityInStock = 20
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "Small"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Name = "Large"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-2222-2321-3429-111111111456"),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("11111111-2222-2321-3529-111111111456"),
                            Name = "customer"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-2222-2321-2321-111111111456"),
                            Address = "123 Main Street, City, Country",
                            BasketId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "password123",
                            Phone = "123-456-7890"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("11111111-2222-2321-2321-111111111456"),
                            RoleId = new Guid("11111111-2222-2321-3429-111111111456")
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Baskets.Basket", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Users.User", "User")
                        .WithOne("Basket")
                        .HasForeignKey("Warehouse.Domain.Entities.Baskets.Basket", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Baskets.BasketLine", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Baskets.Basket", "Basket")
                        .WithMany("BasketLines")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Products.Product", "Product")
                        .WithMany("BasketLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Products.Size", "Size")
                        .WithMany("BasketLines")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Orders.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Orders.OrderLine", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Products.Product", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Products.Size", "Size")
                        .WithMany("OrderLines")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Orders.Payment", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Orders.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Warehouse.Domain.Entities.Orders.Payment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Products.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.ProductGroup", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Products.Group", "Group")
                        .WithMany("ProductGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.ProductSize", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Products.Size", "Size")
                        .WithMany("ProductSizes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Users.UserRole", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Users.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Baskets.Basket", b =>
                {
                    b.Navigation("BasketLines");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Orders.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.Group", b =>
                {
                    b.Navigation("ProductGroups");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("BasketLines");

                    b.Navigation("OrderLines");

                    b.Navigation("ProductGroups");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Products.Size", b =>
                {
                    b.Navigation("BasketLines");

                    b.Navigation("OrderLines");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Users.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Basket");

                    b.Navigation("Orders");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
